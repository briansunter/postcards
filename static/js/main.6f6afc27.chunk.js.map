{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","urlData","urlParams","URLSearchParams","window","location","search","urlDataString","atob","get","isDefaultCard","JSON","parse","e","frontImage","latitude","longitude","message","to","address","sender","console","log","useState","flip","setFlip","state","setState","alreadySeenTutorial","localStorage","getItem","tutorialOpen","setTutorialOpen","showTutorial","shouldShow","setItem","position","steps","selector","content","action","time","Promise","resolve","setTimeout","then","linkTextRef","createRef","cardData","btoa","stringify","className","data-testid","href","closeWithMask","isOpen","lastStepNextButton","onRequestClose","onClick","src","alt","type","value","onChange","target","stopPropagation","preventDefault","Map","id","center","zoom","attributionControl","onMoveEnd","getCenter","lat","lng","zoomControl","TileLayer","url","attribution","Intl","NumberFormat","navigator","language","minimumFractionDigits","maximumFractionDigits","format","newLat","parseFloat","newLong","ref","current","select","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f6afc27.chunk.js","sourcesContent":["import React, { RefObject, createRef, useState } from \"react\";\n\nimport { Map, TileLayer } from \"react-leaflet\";\nimport { LatLngTuple } from \"leaflet\";\nimport Tour from \"reactour\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nimport \"./App.css\";\n\nfunction sleep(time: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nfunction App() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const urlDataString = atob(urlParams.get(\"card\") || \"\");\n  interface URLData {\n    frontImage: string;\n    latitude: number;\n    longitude: number;\n    message: string;\n    to: string;\n    address: string;\n    sender: string;\n  }\n\n  let isDefaultCard = true;\n\n  let urlData: URLData;\n  const defaultUrlData: URLData = {\n    frontImage: \"https://i.imgur.com/TOpuoX2.jpg\",\n    latitude: 42.3528,\n    longitude: -83.1421,\n    message:\n      \"This is the Internet version of sending a postcard home. Use this to send and receive unique flippable postcards. Click on any of these text fields or the map to edit them. Click on the card to flip it.\",\n    to: \"Someone Special\",\n    address: \"San Francisco, CA\",\n    sender: \"Brian Sunter\",\n  };\n  try {\n    urlData = JSON.parse(urlDataString);\n    isDefaultCard = false;\n  } catch (e) {\n    urlData = defaultUrlData;\n    console.log(\"could not parse data\", e);\n  }\n\n  const [flip, setFlip] = useState(true);\n\n  const [state, setState] = useState(urlData);\n\n  const alreadySeenTutorial =\n    localStorage.getItem(\"pc:seenTutorial\") === \"true\";\n\n  const [tutorialOpen, setTutorialOpen] = useState(\n    isDefaultCard && !alreadySeenTutorial\n  );\n\n  const showTutorial = (shouldShow: boolean) => {\n    setTutorialOpen(shouldShow);\n    localStorage.setItem(\"pc:seenTutorial\", !shouldShow ? \"true\" : \"false\");\n  };\n\n  const position: LatLngTuple = [state.latitude, state.longitude];\n  const steps = [\n    {\n      selector: \".App\",\n      content:\n        \"Welcome to PostcardPop, a way of making digital postcards to send to your friends. This is the tutorial. Click the next arrow to go to the next tutorial step or click 'x' to exit.\",\n      action: () => {\n        setFlip(true);\n      },\n    },\n    {\n      selector: \".frontImgInput\",\n      content:\n        \"This is where you can select a nice cover image for your postcard. Make sure sure your image site supports embedding. I recommend https://imgur.com.\",\n      action: () => {\n        setFlip(true);\n      },\n    },\n    {\n      selector: \".front-img\",\n      content: \"Tap anywhere on the card to flip.\",\n      action: () => {\n        setFlip(true);\n      },\n    },\n    {\n      selector: \".left-content\",\n      content: \"This is the area to write your message.\",\n      action: () => {\n        setFlip(false);\n        sleep(1000).then(() => {\n          showTutorial(false);\n          showTutorial(true);\n        });\n      },\n    },\n    {\n      selector: \".stamp\",\n      content:\n        \"Instead of a 'stamp', use a small map of your current location from OpenStreetMaps. You can drag to change the location. You can also update the latitude and longitude boxes below\",\n      action: () => {\n        setFlip(false);\n      },\n    },\n    {\n      selector: \".address\",\n      content:\n        \"Add the person you're sending the postcard to and their city here.\",\n      action: () => {\n        setFlip(false);\n      },\n    },\n    {\n      selector: \".shareLink\",\n      content:\n        \"This is the link to share your postcard. Send it to someone so they can view it.\",\n      action: () => {\n        setFlip(false);\n      },\n    },\n  ];\n  const linkTextRef: RefObject<HTMLTextAreaElement> = createRef();\n\n  const cardData = btoa(JSON.stringify(state));\n  return (\n    <div className=\"App\" data-testid=\"home\">\n      <a href=\"./\" className=\"title\">\n        PostcardPop ✉\n      </a>\n      <Tour\n        closeWithMask={false}\n        steps={steps}\n        isOpen={tutorialOpen}\n        lastStepNextButton={<button className=\"makeOwnButton\">Done!</button>}\n        onRequestClose={() => showTutorial(false)}\n      />\n      <div className=\"post-card\">\n        <div className=\"flip-card\">\n          <div\n            onClick={() => setFlip(!flip)}\n            className={`flip-card-inner ${\n              flip ? \"flip-card-togggle-on\" : \"flip-card-toggle-off\"\n            }`}\n          >\n            <div className=\"flip-card-front\">\n              <img className=\"front-img\" src={state.frontImage} alt=\"Avatar\" />\n              {isDefaultCard && (\n                <input\n                  type=\"text\"\n                  className=\"frontImgInput\"\n                  value={state.frontImage}\n                  onChange={(e) => {\n                    setState({ ...state, frontImage: e.target.value });\n                  }}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                  }}\n                />\n              )}\n            </div>\n            <div className=\"flip-card-back\">\n              <div className=\"left-content\">\n                {isDefaultCard ? (\n                  <textarea\n                    className=\"writing\"\n                    value={state.message}\n                    onChange={(e) => {\n                      setState({ ...state, message: e.target.value });\n                    }}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                  />\n                ) : (\n                  <p className=\"writing\">{state.message}</p>\n                )}\n              </div>\n              <div className=\"middleLine\" />\n              <div className=\"right-content\">\n                <div\n                  className=\"stamp-container\"\n                  onClick={(e: any) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                  }}\n                >\n                  <Map\n                    className=\"stamp\"\n                    id=\"mapId\"\n                    center={position}\n                    zoom={9}\n                    attributionControl={false}\n                    onMoveEnd={(e: any) => {\n                      const { lat, lng } = e.target.getCenter();\n                      setState({ ...state, latitude: lat, longitude: lng });\n                    }}\n                    zoomControl={false}\n                  >\n                    <TileLayer\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      attribution=\"\"\n                    />\n                  </Map>\n                </div>\n                {isDefaultCard && (\n                  <label>\n                    Latitude:\n                    <input\n                      type=\"text\"\n                      value={Intl.NumberFormat(navigator.language, {\n                        minimumFractionDigits: 1,\n                        maximumFractionDigits: 10,\n                      }).format(state.latitude)}\n                      onChange={(e) => {\n                        const newLat = parseFloat(e.target.value);\n                        if (newLat) {\n                          setState({ ...state, latitude: newLat });\n                        }\n                      }}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                    />\n                  </label>\n                )}\n                {isDefaultCard && (\n                  <label>\n                    Longitude:\n                    <input\n                      value={Intl.NumberFormat(navigator.language, {\n                        minimumFractionDigits: 1,\n                        maximumFractionDigits: 10,\n                      }).format(state.longitude)}\n                      onChange={(e) => {\n                        const newLong = parseFloat(e.target.value);\n                        if (newLong) {\n                          setState({ ...state, longitude: newLong });\n                        }\n                      }}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                    />\n                  </label>\n                )}\n                <div className=\"addressBox\">\n                  {isDefaultCard ? (\n                    <label>\n                      TO:\n                      <input\n                        type=\"text\"\n                        className=\"address\"\n                        value={state.to}\n                        onChange={(e) => {\n                          setState({ ...state, to: e.target.value });\n                        }}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                      />\n                    </label>\n                  ) : (\n                    <p className=\"address\">TO: {state.to}</p>\n                  )}\n                  {isDefaultCard ? (\n                    <label>\n                      Address:\n                      <input\n                        type=\"text\"\n                        className=\"address\"\n                        value={state.address}\n                        onChange={(e) => {\n                          setState({ ...state, address: e.target.value });\n                        }}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                      />\n                    </label>\n                  ) : (\n                    <p className=\"address\">{state.address}</p>\n                  )}\n                  {isDefaultCard ? (\n                    <label>\n                      From:\n                      <input\n                        type=\"text\"\n                        className=\"address\"\n                        value={state.sender}\n                        onChange={(e) => {\n                          setState({ ...state, sender: e.target.value });\n                        }}\n                        onClick={(e) => {\n                          e.stopPropagation();\n                        }}\n                      />\n                    </label>\n                  ) : (\n                    <p className=\"address\">FROM: {state.sender}</p>\n                  )}\n                  {isDefaultCard && (\n                    <div>\n                      <textarea\n                        className=\"shareLink\"\n                        ref={linkTextRef}\n                        value={`${window.location.href}?card=${cardData}`}\n                        onClick={(e: any) => {\n                          e.stopPropagation();\n                          linkTextRef.current?.select();\n                        }}\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {!isDefaultCard ? (\n        <a className=\"makeOwnButton\" href=\"./\">\n          Make your own\n        </a>\n      ) : (\n        <a\n          className=\"makeOwnButton\"\n          href=\"./\"\n          onClick={() => showTutorial(true)}\n        >\n          Show Tutorial\n        </a>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}