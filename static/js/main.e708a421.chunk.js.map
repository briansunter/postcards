{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","urlParams","URLSearchParams","window","location","search","urlDataString","atob","get","urlData","JSON","parse","e","console","log","frontImage","latitude","longitude","message","to","address","sender","useState","flip","setFlip","position","className","data-testid","onClick","src","alt","Map","id","center","zoom","attributionControl","zoomControl","TileLayer","url","attribution","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0QAyFeA,MAlFf,WACE,IAAMC,EAAY,IAAIC,gBAAgBC,OAAOC,SAASC,QAChDC,EAAgBC,KAAKN,EAAUO,IAAI,SAAW,IAWhDC,EAAmB,GAEvB,IACEA,EAAUC,KAAKC,MAAML,GACrB,MAAOM,GACPC,QAAQC,IAAI,uBAAwBF,GAlBzB,MA6BTH,EA7BS,IAsBXM,kBAtBW,MAsBE,kCAtBF,MAuBXC,gBAvBW,MAuBA,QAvBA,MAwBXC,iBAxBW,OAwBE,QAxBF,MAyBXC,eAzBW,MAyBD,oHAzBC,MA0BXC,UA1BW,MA0BN,kBA1BM,MA2BXC,eA3BW,MA2BD,oBA3BC,MA4BXC,cA5BW,MA4BF,eA5BE,IA+BWC,oBAAS,GA/BpB,mBA+BNC,EA/BM,KA+BAC,EA/BA,KAiCPC,EAAwB,CAACT,EAAUC,GAEzC,OACE,yBAAKS,UAAU,MAAMC,cAAY,QAC/B,yBAAKD,UAAU,aACb,yBAAKA,UAAU,aACb,yBACEE,QAAS,kBAAMJ,GAASD,IACxBG,UAAS,0BACPH,EAAO,uBAAyB,yBAGlC,yBAAKG,UAAU,mBACb,yBAAKA,UAAU,YAAYG,IAAKd,EAAYe,IAAI,YAElD,yBAAKJ,UAAU,kBACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,WAAWR,IAE1B,yBAAKQ,UAAU,iBACb,yBAAKA,UAAU,mBACb,kBAACK,EAAA,EAAD,CACEL,UAAU,QACVM,GAAG,QACHC,OAAQR,EACRS,KAAM,EACNC,oBAAoB,EACpBC,aAAa,GAEb,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,OAIlB,yBAAKb,UAAU,cACb,uBAAGA,UAAU,WAAb,OAA4BP,EAA5B,KACA,uBAAGO,UAAU,WAAb,IAAyBN,EAAzB,KACA,uBAAGM,UAAU,WAAb,SAA8BL,EAA9B,aClEEmB,QACW,cAA7BrC,OAAOC,SAASqC,UAEe,UAA7BtC,OAAOC,SAASqC,UAEhBtC,OAAOC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMrC,c","file":"static/js/main.e708a421.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport { LatLngTuple } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const urlParams = new URLSearchParams(window.location.search);\n  const urlDataString = atob(urlParams.get(\"card\") || \"\");\n  interface URLData {\n    frontImage?: string;\n    latitude?: number;\n    longitude?: number;\n    message?: string;\n    to?: string;\n    address?: string;\n    sender?: string;\n  }\n\n  let urlData: URLData = {};\n\n  try {\n    urlData = JSON.parse(urlDataString);\n  } catch (e) {\n    console.log(\"could not parse data\", e);\n  }\n\n  const {\n    frontImage = \"https://i.imgur.com/TOpuoX2.jpg\",\n    latitude = 42.3528,\n    longitude = -83.1421,\n    message = \"This is the internet version of sending a postcard home. Use this to send and recieve unique flippable postcards.\",\n    to = \"Someone Special\",\n    address = \"San Francisco, CA\",\n    sender = \"Brian Sunter\",\n  } = urlData;\n\n  const [flip, setFlip] = useState(true);\n\n  const position: LatLngTuple = [latitude, longitude];\n\n  return (\n    <div className=\"App\" data-testid=\"home\">\n      <div className=\"post-card\">\n        <div className=\"flip-card\">\n          <div\n            onClick={() => setFlip(!flip)}\n            className={`flip-card-inner ${\n              flip ? \"flip-card-togggle-on\" : \"flip-card-toggle-off\"\n            }`}\n          >\n            <div className=\"flip-card-front\">\n              <img className=\"front-img\" src={frontImage} alt=\"Avatar\" />\n            </div>\n            <div className=\"flip-card-back\">\n              <div className=\"left-content\">\n                <p className=\"writing\">{message}</p>\n              </div>\n              <div className=\"right-content\">\n                <div className=\"stamp-container\">\n                  <Map\n                    className=\"stamp\"\n                    id=\"mapId\"\n                    center={position}\n                    zoom={9}\n                    attributionControl={false}\n                    zoomControl={false}\n                  >\n                    <TileLayer\n                      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                      attribution=\"\"\n                    />\n                  </Map>\n                </div>\n                <div className=\"addressBox\">\n                  <p className=\"address\">TO: {to} </p>\n                  <p className=\"address\"> {address} </p>\n                  <p className=\"address\">FROM: {sender} </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}